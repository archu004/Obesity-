# -*- coding: utf-8 -*-
"""obesity-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AR7ZVEFoW6AXK1_XT-Iro16diND6fsB0
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/content/Obesity Classification.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv('/content/Obesity Classification.csv')

df.head(3)

df.tail()

df.shape

df.info()

df.drop('ID', axis = 1, inplace = True)

df.sample(8)

import seaborn as sns
sns.scatterplot(x = 'Height', y = 'Weight', hue = 'Gender', data = df)

"""Women --> H=> 120 to 160, W=> 20 to 100
Men   --> H=> 175>200 W=> 20<120
"""

df.BMI.dtype

import matplotlib.pyplot as plt

cols = df.columns

import warnings
warnings.filterwarnings('ignore')

sns.kdeplot(data = df, x = 'Age', hue='Gender', fill=True, palette='Set1')

male_data = df[df['Gender'] == 'Male']

male_data.head(3)

female_data = df[df['Gender'] == 'Female']

female_data.head(3)

sns.pairplot(male_data, palette = 'Set2')

male_data.describe()

female_data.describe().T

df.Label.unique()

df.sample(4)

Obese.sample(3)

Obese.Gender.unique()

Normal_Weight.Gender.unique()

sns.barplot(x = 'Weight', y = 'Height', hue = 'Gender', data = Obese)

sns.barplot(x = 'Weight', y = 'Height', hue = 'Gender', data = Overweight)

df.info()

from sklearn.preprocessing import LabelEncoder
le= LabelEncoder()

df['Gender'] = le.fit_transform(df['Gender'])
df.sample(5)

from sklearn.model_selection import train_test_split
x = df.drop('Label', axis = 1)
y = df['Label']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors = 5)

knn.fit(x_train, y_train)

y_pred_KN = knn.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_KN = accuracy_score(y_test, y_pred_KN)

print("ACCURACY: ", accuracy_KN)

from sklearn.metrics import classification_report
report = classification_report(y_test, y_pred_KN)

print('REPORT: ', report)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred_KN)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()

lr.fit(x_train, y_train)
y_pred_LR = lr.predict(x_test)

accuracy_LR = accuracy_score(y_test, y_pred_LR)

print('ACCURACY LR: ', accuracy_LR)

sns.histplot(x = y_pred_LR, y = y_test, bins='30')
plt.xlabel('PREDICTED')
plt.ylabel('TEST')
plt.title('Logistic Regression - Predicted Class Labels')
plt.show()

x_test.dtypes

type(x_test)

from sklearn.ensemble import RandomForestClassifier

RF_model  = RandomForestClassifier()

RF_model.fit(x_train, y_train)

y_pred_RF = RF_model.predict(x_test)

accuracy_RF = accuracy_score(y_pred_RF, y_test)

print("ACCURACY RF: ", accuracy_RF)

from sklearn.tree import DecisionTreeClassifier
model_DT = DecisionTreeClassifier(random_state = 42)

model_DT.fit(x_train, y_train)

y_pred_DT = model_DT.predict(x_test)

accuracy_DT = accuracy_score(y_pred_DT, y_test)
print("ACCURACY DT: ",accuracy_DT)

"""# LOGISTIC REGRESSION PLOT"""

plt.scatter(y_test, y_pred_LR, color = 'blue', alpha = 1.0)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color = 'green', linestyle = '--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Values')
plt.show()

"""# KNN PLOT"""

plt.scatter(y_test, y_pred_KN, color = 'blue', alpha = 1.0)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color = 'green', linestyle = '--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Values')
plt.show()

"""# RANDOM FOREST CLASSIFIER PLOT"""

plt.scatter(y_test, y_pred_RF, color = 'blue', alpha = 1.0)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color = 'green', linestyle = '--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Values')
plt.show()

"""# DECISION TREE CLASSIFIER PLOT"""

plt.scatter(y_test, y_pred_DT, color = 'blue', alpha = 1.0)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color = 'green', linestyle = '--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Values')
plt.show()